<?xml version="1.0" encoding="UTF-8"?>
<add>
  <doc>
    <field name="type">page</field>
    <field name="name">index</field>
    <field name="tag">MAIN</field>
    <field name="url">index.html</field>
    <field name="keywords"></field>
    <field name="text">Barotrauma C modding guide C modding is part of the Lua For Barotrauma mod and requires the package Cs For Barotrauma to be turned on steam workshop in some cases the package is not needed and a prompt in game will be shown to enable it automatically This modding requires strict source structure but comes with the benefits of being handled natively by game engine witch removes many hurdles with type casting or similar issues Download Visual Studio You may use another version of VS or another IDE like JetBrains Rider However it must support NET 6 as a platform/SDK target and there is no guarantee that the project will function as expected although there should be little issue Important You must have Visual Studio Build Tools 2 0 1 9 or later installed with the Individual Component under SDKs libraries and frameworks named Visual Studio SDK Build Tools Core installed Git Clone or Download the following Refs.zip This contains all references used in the project Choose the one from the latest release on the Github repo VSProjectSkeleton This contains the skeleton project that we will be using as the basis for this tutorial Most things that need to be setup have already been done If you do not have Git Tools installed it is recommended that you get familiar with them as it makes life easier and is required for Part 2 optional Download and install it Extract the VS Project Skeleton to a folder that you are working out of IMPORTANT This folder should NOT be in your Barotrauma/Luatruama local mods folder! Copy the contents of the Refs.zip into the folder in the VS Skeleton Project Your project should then have the below structure Rename the Skeleton Project folder to the name of your mod Open up the Solution file sln from the Skeleton Project in Visual Studio Just verify that there are not errors related to this means that all assemblies in have be found successfully Rename the MyModName.sln file to the name of your mod IE ModdingToolkit.sln Open the sln Solution file In your IDE you will need to do the following for all csproj files A Open the Project Configuration for the csproj file by right-clicking and selecting Properties B Change the AssemblyName to the name of your mod WITHOUT SPACES OR SPECIAL CHARACTERS Example ModdingToolkit C Change the Root Namespace to either your mod s Assembly Name or mod s short version without spaces in plain English Example ModdingToolkit This will give us a debug build of LuaCsForBarotrauma A debug build gives us access to many tools as well as the DEBUG symbol for writing test/print code that will not be run in the release version Clone the LuaCsForBarotrauma repository to your local drive If you do not have Git Tools installed please download and install it Important When cloning use the command git clone recurse-submodules remote-submodules This will download the submodules automatically Open up the LuaCs Solution in your IDE based on your Operating System one of NOTE This tutorial assumes that you are using the WindowsSolution.sln For other platforms the naming of files may be slightly different MacXXX LinuxXXX where XXX is either or In the Project Settings for WindowsClient and WindowsServer you want to change the Platform Target from Any CPU to x64 This is necessary for OpenAL code to build successfully Build the whole Solution Build Build Solution This will create the necessary dependencies from libraries and make sure that there are no errors at this point For both the WindowsClient and WindowsServer projects set their output/build type to DEBUG should be in a drop-down menu at the top next to a green play button Select Build Solution This will generate Debug builds for use This debug build will now exist in 0 where XXX is based on your Solution choice IE 0 Make the local folder in Barotrauma/LocalMods/ for your mod A Navigate into the Client Debug Build folder or game folder if you are coming from Part 3 Step 3 and then into B CREATE a folder with the name of your mod Ideally it should match the name of your sln file with the extension C COPY the path to this directory with your mod and save it in a sticky note or txt file We will be using it shortly You will have to do the following for the Build.props file found in the main project directory Open the file in your Text Editor or IDE of choice Locate the line ModDeployDir IE Change the ModDeployDir value from LUATRAMA_DEBUG_LOCALMODS_MYMODDIR to the path to your mod s folder in the folder for LuaCsForBarotrauma from Part 2 Step 7 IMPORTANT The value must end with or IE LocalMods ModdingToolkit Note If you did not complete Part 2 then complete only Part 2 Step 7 but use your vanilla Barotrauma installation location instead Note If you do not want either the Client plugin or the Server plugin IE Client-side or Server-side ONLY mod then you must delete all projects that end with Server Example LinuxServer WindowsServer Warning this is generally irreversible and will require you to setup new Cs Projects if you want a client in the future Replace MyModName with a valid assembly name this should be similar to your mod name but does not need to match This name should Not include spaces Not include special characters except periods which are allowed Use english characters Recommended Follow the convention of ModName or PackageName.LibraryName for libraries IE ModdingToolkit.GUI This part makes life very easy and gives you access to Edit and Continue It ll let you Debug your build as you go and launch Barotrauma from the IDE Note that this is IDE-specific so please follow the links for your IDE while doing the below Make two launch options A One should target Barotrauma.exe or Barotrauma.dll name it Client B The other should target DedicatedServer.exe or DedicatedServer.dll and name it Server Follow the link For Jetbrains Rider IDE what I use For Visual Studio 2 0 2 2 IDE This part is optional and only to be used if your mod relies on the assemblies/code from another mod to run/compile This will allow you to add Script/Code ContentPackages as dependencies to make sure they load first Open ProjectDirectory cfg it should look like this Add a Dependencies section/node/element Add the STEAMID or Name of your dependencies surrounded by Dependency elements as follows PackageName Name for name matching SteamWorkshopId 0 0 0 0 0 0 and replace zeroes with the dependency s workshop steam id And you re good to go! The main star of the show is Barotrauma.ACsMod class It is what most of your mods will use to hook game methods and execute custom code If you are planning on creating new components it s possible to just inherit from ItemComponent Mods have full access to Harmony to allow you to perform any patches you wish All utility classes can be accessed either by their type i.e that have name that starts with LuaCs or through GameMain.LuaCs property refer to class documentation All C code files must be located in mod_root otherwise they won t be compiled To configure server client execution behaviour create RunConfig.xml in CSharp directory like is shown below run types are Standard Forced and None Additionally you can specify what code runs where by either filepath or pre-processor statements In case of filepath your files must be located in either CSharp/Shared/* CSharp/Server/* or CSharp/Client/* for shared code server-side code or client-side code respectively in any other case the code is assumed to be shared I case of pre-processor you can use SERVER or CLIENT definitions to separate code into server-side code and client-side code respectively A generic C mod boilerplate File-tree mod_root xml mod_root cs mod_root cs mod_root cs mod_root xml Server documentation Client documentation</field>
  </doc>
</add>
